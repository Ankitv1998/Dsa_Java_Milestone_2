***********************************************************************************************************************
Delete node Recursively
***********************************************************************************************************************

/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {


	public static LinkedListNode<Integer> deleteNodeRec(LinkedListNode<Integer> head, int pos) {
    	//Your code goes here
        if (head == null)
        {
            return head;
        }
        
        if (pos==0)
        {
            head=head.next;
            return head;
        }
        else
        {
            LinkedListNode<Integer> smallerHead=deleteNodeRec(head.next,pos-1);
            head.next=smallerHead;
            return head;
        }  
	}


}
/*
 * Output:
 * 1 //Test Code
 * 3 4 5 2 6 1 9 -1 // given node in linked list
 * 3 // array indexing 3 is removing then value publishe

 Output: 3 4 5 6 1 9 // 2 is delete.
 */
 
 ***********************************************************************************************************************
 Reverse LL (Recursive)
 ***********************************************************************************************************************
 
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static LinkedListNode<Integer> reverseLinkedListRec(LinkedListNode<Integer> head) {
		//Your code goes here

    if (head==null || head.next==null)  // || OR OPERATION (addition:-)
        {
            return head;
        }
        LinkedListNode<Integer> smallerHead=reverseLinkedListRec(head.next);
        LinkedListNode<Integer> node=smallerHead;
        while (node.next!=null)
        {
            node=node.next;
        }
        node.next=head; // next node head
        head.next=null; // -1 represent last node in linkedlist
        return smallerHead;
	}


}
/*
 * Output:
 * 1 //test case
 * 1 2 3 4 5 6 7 8 -1 // given node in linked list
 
 
Result :
 * 8 7 6 5 4 3 2 1 // last node reverse (-1) is last indexing ie means end of single linked list
 */
 
 ***********************************************************************************************************************
 Mid Point Linked List
 ***********************************************************************************************************************
 
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head) {
    //Your code goes here
    if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> fast=head,slow=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
        
  }

}

/*
 * Output:
 * 1// Test case
 * 18 21 9 4 10 15 -1// given node in linked list 


 Result: Mid point[ 18-0, 21-1, 9-2 , 4-3, 10-5, 15-6, ]

 0+6/2= 3 
 element of 3rd is 9.
 */
 
 ***********************************************************************************************************************
 Merge Two Sorted LL
 ***********************************************************************************************************************
 
 
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes hereif (head1==null)
   if (head1==null)
        {
            return head2;
        }
        
        if (head2==null)
        {
            return head1;
        }
        
        LinkedListNode<Integer> newHead=null,node1=head1,node2=head2,newNode=null;
        int data1=node1.data,data2=node2.data;
        if (data1<data2)
        {
            newHead=node1;
            node1=node1.next;
        }
        else
        {
            newHead=node2;
            node2=node2.next;
        }
        newNode=newHead;
        while(node1!=null && node2!=null)
        {
            data1=node1.data;
            data2=node2.data;
            if (data1<data2)
            {
                newNode.next=node1;
                newNode=newNode.next;
                node1=node1.next;
            }
            else
            {
                newNode.next=node2;
                newNode=newNode.next;
                node2=node2.next;
            }
        }
        
        while(node1!=null)
        {
            newNode.next=node1;
            newNode=newNode.next;
            node1=node1.next;
        }
        while (node2!=null)
        {
            newNode.next=node2;
            newNode=newNode.next;
            node2=node2.next;
        }
        return newHead;
    }
}

***********************************************************************************************************************
Merge Sort LL
***********************************************************************************************************************
/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		//Your code goes here
        if(head==null)
            return head;
        if(head.next==null)
            return head;
        LinkedListNode<Integer> midNode=findmid(head);
        LinkedListNode<Integer> h2=midNode.next;
        midNode.next=null;
        LinkedListNode<Integer> part1=mergeSort(head);
        LinkedListNode<Integer> part2=mergeSort(h2);
        LinkedListNode<Integer> mergedList=mergeTwoList(part1,part2);
        return mergedList;
        
        }
    private static LinkedListNode<Integer> findmid(LinkedListNode<Integer> head) 
    {
        if(head==null)
            return head;
        LinkedListNode<Integer> slow=head,fast=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public static LinkedListNode<Integer> mergeTwoList(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        if(head1==null)
            return head2;
        if(head2==null)
            return head1;
        LinkedListNode<Integer> t1=head1,t2=head2,tail=null,head=null;
        if(t1.data<=t2.data)
        {
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        else
        {
            head=t2;
            tail=t2;
            t2=t2.next;
        }
        while(t1!=null &&t2!=null)
        {
            if(t1.data<=t2.data)
            {
                tail.next=t1;
                tail=t1;
                t1=t1.next;
            }
            else
            {
                tail.next=t2;
                tail=tail.next;
                t2=t2.next;
            }
        }
        if(t1==null)
            tail.next=t2;
        if(t2==null)
            tail.next=t1;
        return head;

    }

}
***********************************************************************************************************************
Assignment 

***********************************************************************************************************************
Find a node in LL (recursive)
***********************************************************************************************************************
/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {


	public static int findNodeRec(LinkedListNode<Integer> head, int n) {
    	//Your code goes here
	 if (head==null) //Empty linked list
        {
            return -1;
        }
        
        if (head.data.equals(n))
        {
            return 0;
        }
        int smallIndex=findNodeRec(head.next,n);
        if (smallIndex==-1)
        {
            return smallIndex;
        }
        else
        {
            return smallIndex+1;
        }
	}

}
/*Output:
1 // TTest case
3 4 5 2 6 1 9 -1 // given node in linked list
100 // find element


Result;-
 -1 // because 100 is not element on node in linked list*/
 
 ***********************************************************************************************************************
 Even after Odd LinkedList
 ***********************************************************************************************************************
 
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/


public class Solution {

	public static LinkedListNode<Integer> evenAfterOdd(LinkedListNode<Integer> head) {
		//Your code goes here
 if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> node=head,evenNode=null,oddNode=null,oddHead=null,evenHead=null;
        while(node!=null)
        {            
            int data=node.data;
            //System.out.println(data);
            
            if (data%2==0)
        	{
                //System.out.println(data+" is divisble by 2");
                if (evenNode==null)
                {
                    //System.out.println("Adding first node");
                    evenNode=node;
                    evenHead=node;
                }
                else
                {
                    evenNode.next=node;
                	evenNode=evenNode.next;
                }
                //System.out.println("Even numbers");
        		//Runner.print(evenHead);
            	
        	}
        	else
        	{
                //System.out.println(data+" is not divisble by 2");
                if (oddNode==null)
                {
                    //System.out.println("Adding first node");
                    oddNode=node;
                    oddHead=node;
                }
                else
                {
                    oddNode.next=node;
                	oddNode=oddNode.next;
                }
                //System.out.println("Odd numbers");
            	//Runner.print(oddHead);
            	
        	}
            
            //System.out.println();
            node=node.next;
        }
        //Runner.print(oddHead);
        //Runner.print(evenHead);
        if (oddHead==null)
        {
            return evenHead;
        }
        else
        {
            oddNode.next=evenHead;
        }
        
        if (evenNode!=null)
        {
            evenNode.next=null;
        }
        
        
        return oddHead;
        
	}
}


***********************************************************************************************************************
Delete every N nodes
***********************************************************************************************************************


/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/



public class Solution {
	
	public static LinkedListNode<Integer> skipMdeleteN(LinkedListNode<Integer> head, int M, int N) {
		//Your code goes here
	 if (M==0)
        {
            return null;
        }
        if (N==0)
        {
            return head;
        }
    
        LinkedListNode<Integer> node=head,delNode=null;
        while(node!=null)
        {
            for (int i=0;i<M-1 && node!=null;i++)
            {
                //System.out.print(node.data+" ");
                node=node.next;
            }
            //System.out.println();
            if (node==null)
            {
                break;
            }
            
            delNode=node.next;         
            for (int i=0;i<N && delNode!=null;i++)
            {
                //System.out.print(delNode.data+" ");
                delNode=delNode.next;
            }
            node.next=delNode;
            node=delNode;
        }
         
        return head;
	}
}
/*
 * Output:
 * 1 //test case
 * 1 2 3 4 5 6 7 8 -1 // given node in linked list
 * 2 2 // take two element and after remove two element

 Result:- 12 5 6 // 34 remove, 78 remove
 */
 
 ***********************************************************************************************************************
 Swap two Nodes of LL
 ***********************************************************************************************************************
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static LinkedListNode<Integer> findPrevNode(LinkedListNode<Integer> head, int count)
    {
        for (int i=0;i<count-1;i++)
        {
            head=head.next;
        }
        return head;
    }

	public static LinkedListNode<Integer> swapNodes(LinkedListNode<Integer> head, int i, int j) {
		//Your code goes here
        if (head==null)
        {
            return head;
        }
        else if (j==0 || (i-j==-1))
        {
            int temp=i;
            i=j;
            j=temp;
        }
        
        LinkedListNode<Integer> swap1=null,swap2=null,p1=null,n1=null,p2=null,n2=null;
        
        if (i==0 && i-j==1)
        {
            swap1=head;
            swap2=head.next;

            swap1=swap1.next;
            head=swap2;
            swap2.next=swap1;
            
        }
        else if(i-j==1)
        {
            p1=findPrevNode(head,j);
        	swap1=p1.next;
            swap2=swap1.next;
            n2=swap2.next;
            //System.out.println(p1.data);
            //System.out.println(swap1.data);
            //System.out.println(swap2.data);
            //System.out.println(n2.data);
            
            p1.next=swap2;
            swap2.next=swap1;
            swap1.next=n2;
            
        }
        else if (i==0)
        {
            swap1=head;
            n1=swap1.next;
            p2=findPrevNode(head,j);
            swap2=p2.next;
            n2=swap2.next;
            
            head=swap2;
            head.next=n1;
            p2.next=swap1;
            swap1.next=n2;
            
        }
        else
        {
        	p1=findPrevNode(head,i);
        	p2=findPrevNode(head,j);
        	swap1=p1.next;
        	swap2=p2.next;
        	n1=swap1.next;
        	n2=swap2.next;
        
        	p1.next=swap2;
        	p2.next=swap1;
        	swap1.next=n2;
        	swap2.next=n1;
        }
        
        
        return head;
	}

}
/*Output:
1 // test case
3 4 5 2 6 1 9 -1 // given node of linked list
2 3 // index 2 and index 3 as swapped


Result: 3 4 2 5 6 1 9 


*/

***********************************************************************************************************************
kReverse
***********************************************************************************************************************
/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static LinkedListNode<Integer> reverseLinkedListRec(LinkedListNode<Integer> head) {
		//Your code goes here
        
        if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> smallerHead=reverseLinkedListRec(head.next);
        LinkedListNode<Integer> node=smallerHead;
        while (node.next!=null)
        {
            node=node.next;
        }
        node.next=head;
        head.next=null;
        return smallerHead;
	}
    
    public static LinkedListNode<Integer> findTail(LinkedListNode<Integer> head, int k)
    {
            for (int i=0;i<k && head.next!=null;i++)
            {
                head=head.next;
            }
            return head;
        
        
    }
    
    public static int findLength(LinkedListNode<Integer> head)
    {
        int count=0;
        while(head.next!=null)
        {
            head=head.next;
            count=count+1;
        }
        return count;
    }
    
    public static LinkedListNode<Integer> kReverse(LinkedListNode<Integer> head, int k) {
		//Your code goes here
        if (head==null || k==0 || k==1)
        {
            return head;
        }
        else if (k>findLength(head))
        {
            return reverseLinkedListRec(head);
        }
        
        LinkedListNode<Integer> node=head,nextNode=null,tail=null,prevTail=null,newHead=null;
        while(node!=null)
        {
            tail=findTail(node,k-1);
            nextNode=tail.next;
            tail.next=null;
            newHead=reverseLinkedListRec(node);
            //Runner.print(newHead);
            if (node==head)
            {
                tail=head;
                tail.next=nextNode;
                head=newHead;
                
            }
            else
            {
                tail=node;
                tail.next=nextNode;
                prevTail.next=newHead;
                
            }
            node=nextNode;
            prevTail=tail;
            //Runner.print(head);
            
        }
        return head;
        
        
	}

}

/* OUtput:
1 // test case
1 2 3 4 5 6 7 8 9 10 -1 // given node in linked list
4 // to before indexing  4 Reverse..

Result: 4 3 2 1 // 8 7 6 5 // 10 9 in first 4 term reverse of indexing 4-1 after 2nd term 
reverse of indexing 4-1 and last then published
  */

***********************************************************************************************************************
Bubble Sort (Iterative) LinkedList
***********************************************************************************************************************

/*

	Following is the Node class already written for the Linked List

	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;
    
    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*/



public class Solution {

	public static int findLengthLL(LinkedListNode<Integer> head)
	{
    	int count=0;
    	while(head.next!=null)
    	{
        	head=head.next;
        	count=count+1;
    	}
    	return count;
    
	}

	public static LinkedListNode<Integer> bubbleSort(LinkedListNode<Integer> head) {
		//Your code goes here
        if (head==null || head.next==null)
        {
            return head;
        }
        int n=findLengthLL(head);
        LinkedListNode<Integer> node1=null,node2=null,temp=null;
        int data1=0,data2=0;
        for (int i=0;i<n;i++)
        {
            node1=head;
            node2=head.next;
            for (int j=0;j<n-i;j++)
            {
                data1=node1.data;
                data2=node2.data;
                if (data1>data2)
                {
                    node1.data=data2;
                    node2.data=data1;
                }
                node1=node1.next;
                node2=node2.next;
                
            }
          
        }
      
        return head;
        
	}
}

/*Output:
10 9 8 7 6 5 4 3 -1 // given node in linked list
Sample Output 1 :
 3 4 5 6 7 8 9 10 // sort in bubble sort linkedl list */
 
 
